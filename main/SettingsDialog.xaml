<Window x:Class="NBackTask.SettingsDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:NBackTask"
        mc:Ignorable="d"
        Title="Settings"
        Height="518"
        Width="480"
        Icon="/assets/images/icon.png"
        ResizeMode="NoResize"
        d:Height="520"
        WindowStartupLocation="CenterScreen">

    <Window.Resources>
        <local:ColorBrushConverter x:Key="scb2brush"/>
        <local:NegateConverter x:Key="not"/>
        <local:PathUIConverter x:Key="pathUI"/>
        <local:SessionTypeToVisibility x:Key="sessionType2Visibility"/>
        <local:SessionTypeToEnabled x:Key="sessionType2Enabled"/>
        <local:TaskTypeToEnabled x:Key="taskType2Enabled"/>
        <local:SessionType x:Key="trialCount">Count</local:SessionType>
        <local:SessionType x:Key="sessionDuration">Duration</local:SessionType>
        <local:TaskType x:Key="nback">NBack</local:TaskType>
        <local:TaskType x:Key="oneback">OneBack</local:TaskType>

        <ObjectDataProvider x:Key="inputModes" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:InputMode"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="sessionTypes" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:SessionType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="taskTypes" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:TaskType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <Style x:Key="CloseButton" TargetType="Button">
            <Setter Property="MinWidth" Value="60"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="Padding" Value="4"/>
        </Style>
        <Style x:Key="Iconic" TargetType="Button">
            <Setter Property="Width" Value="28"/>
            <Setter Property="Height" Value="28 "/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <Style x:Key="Color" TargetType="Button">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="Width" Value="46"/>
        </Style>
        <Style TargetType="CheckBox">
            <Setter Property="Height" Value="26"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="4,0"/>
        </Style>
        <Style TargetType="ComboBox">
            <Setter Property="Height" Value="26"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="2"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Width" Value="46"/>
            <Setter Property="Margin" Value="2"/>
        </Style>
        <Style x:Key="Header" TargetType="Label">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>

        <Style x:Key="CompactMenuItemStyle" TargetType="MenuItem">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="MenuItem">
                        <Border Name="Border"
                                Background="Transparent"
                                Padding="4,4">
                            <ContentPresenter ContentSource="Header"
                                              Margin="0"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#FFDDDDDD"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#888"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Grid.Column="0"
                    Margin="4">
            <Label Style="{StaticResource Header}">View</Label>
            <Grid>
                <Label>Blank screen background</Label>
                <Button Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding ScreenColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button>
            </Grid>
            <Grid>
                <Label>Stimuli screen background</Label>
                <Button Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding ActiveScreenColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button>
            </Grid>
            <Grid>
                <Label>Stimulus background</Label>
                <Button Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding StimulusColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button>
            </Grid>
            <Grid>
                <Label>Stimulus foreground</Label>
                <Button Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding StimulusFontColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button>
            </Grid>
            <Grid>
                <Label>Selected stimulus background</Label>
                <Button Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding ActiveStimulusColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button>
            </Grid>
            <Grid>
                <Label>Selected stimulus foreground</Label>
                <Button Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding ActiveStimulusFontColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button>
            </Grid>

            <Separator/>

            <Grid>
                <Label>Stimulus border, px</Label>
                <TextBox x:Name="txbStimulusBorder">
                    <TextBox.Text>
                        <Binding Path="StimulusBorderThickness" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0" Max="60" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid>
                <Label>Inter-stimulus gap, px</Label>
                <TextBox x:Name="txbStimulusGap">
                    <TextBox.Text>
                        <Binding Path="StimulusGap" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0" Max="200" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid>
                <Label>Stimulus unstretched size, px</Label>
                <TextBox x:Name="txbStimulusUnstretchedSize">
                    <TextBox.Text>
                        <Binding Path="StimulusUnstretchedSize" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="20" Max="1000" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>

        </StackPanel>

        <StackPanel Grid.Row="0" Grid.Column="1"
                    Margin="12,4,4,4">
            <Label Style="{StaticResource Header}">Procedure</Label>
            <Grid>
                <Label>Session type</Label>
                <ComboBox Width="80"
                          HorizontalAlignment="Right"
                          ItemsSource="{Binding Source={StaticResource sessionTypes}}"
                          SelectedItem="{Binding Path=SessionType}"/>
            </Grid>
            <Grid Visibility="{Binding SessionType, Converter={StaticResource sessionType2Visibility}, ConverterParameter={StaticResource trialCount}}">
                <Label Margin="16,0,0,0">number of trials</Label>
                <TextBox x:Name="txbTrialCount">
                    <TextBox.Text>
                        <Binding Path="TrialCount" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="1" Max="1000" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid Visibility="{Binding SessionType, Converter={StaticResource sessionType2Visibility}, ConverterParameter={StaticResource sessionDuration}}">
                <Label Margin="16,0,0,0">session duration (seconds)</Label>
                <TextBox x:Name="txbSessionDuration">
                    <TextBox.Text>
                        <Binding Path="SessionDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="5" Max="3600" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>

            <Grid>
                <Label>Task type</Label>
                <ComboBox Width="80"
                          HorizontalAlignment="Right"
                          ItemsSource="{Binding Source={StaticResource taskTypes}}"
                          SelectedItem="{Binding Path=TaskType}"/>
            </Grid>
            <Grid IsEnabled="{Binding TaskType, Converter={StaticResource taskType2Enabled}, ConverterParameter={StaticResource oneback}}">
                <Label Margin="16,0,0,0">target [0..9]</Label>
                <TextBox x:Name="txbSingleStimulus">
                    <TextBox.Text>
                        <Binding Path="OneBackStimulus" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0" Max="9" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid>
                <Label>Input mode</Label>
                <ComboBox Width="80"
                          HorizontalAlignment="Right"
                          ItemsSource="{Binding Source={StaticResource inputModes}}"
                          SelectedItem="{Binding Path=InputMode}"/>
            </Grid>

            <Separator/>

            <Grid>
                <Label>Blank screen duration, ms</Label>
                <TextBox x:Name="txbBlankScreenDuration">
                    <TextBox.Text>
                        <Binding Path="BlankScreenDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0" Max="60000" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <CheckBox x:Name="chkIsInfiniteTrial"
                      Content="Trials last until activation"
                      IsChecked="{Binding IsTrialInfinite, Mode=TwoWay}"/>
            <Grid IsEnabled="{Binding IsChecked, ElementName=chkIsInfiniteTrial, Converter={StaticResource not}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="23*"/>
                    <ColumnDefinition Width="89*"/>
                </Grid.ColumnDefinitions>
                <Label Grid.ColumnSpan="2">Stimulus duration, ms</Label>
                <TextBox x:Name="txbStimulusDuration" Grid.Column="1" HorizontalAlignment="Left" Margin="130,2,0,2">
                    <TextBox.Text>
                        <Binding Path="StimulusDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="100" Max="60000" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <StackPanel IsEnabled="{Binding IsChecked, ElementName=chkIsInfiniteTrial, Converter={StaticResource not}}">
                <CheckBox x:Name="chkActivationInterruptsTrial"
                      Content="Activation interrupts a trial"
                      IsChecked="{Binding ActivationInterruptsTrial, Mode=TwoWay}"/>
                <CheckBox Content="Allow multiple activations"
                      IsChecked="{Binding AllowMultipleActivations, Mode=TwoWay}"
                      IsEnabled="{Binding IsChecked, ElementName=chkActivationInterruptsTrial, Converter={StaticResource not}}"/>
            </StackPanel>
            <Grid>
                <Label>Result display duration, ms</Label>
                <TextBox x:Name="txbResultDisplayDuration">
                    <TextBox.Text>
                        <Binding Path="InfoDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0" Max="10000" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>

            <Separator/>

            <CheckBox IsChecked="{Binding PlayBackgroundNoise, Mode=TwoWay}"
                      Content="Play background noise"/>
            <CheckBox IsChecked="{Binding PlaySoundOnActivation, Mode=TwoWay}"
                      Content="Play activation sound"/>

        </StackPanel>

        <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">
            <Separator/>
            <Grid Margin="4,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Label Grid.Column="0"
                       VerticalAlignment="Center"
                       Content="Log folder"/>
                <TextBlock Grid.Column="1"
                           Text="{Binding LogFolder, Mode=OneWay, Converter={StaticResource pathUI}}"
                           Margin="8,0"
                           TextWrapping="Wrap"
                           FontFamily="Consolas"
                           VerticalAlignment="Center"/>
                <Button Grid.Column="2" Style="{StaticResource Iconic}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Content="..."
                        Click="SelectFolder_Click"/>
            </Grid>

            <Grid>
                <Button Margin="6,4,4,0"
                        Width="28"
                        Height="28"
                        Padding="4"
                        HorizontalAlignment="Left"
                        Click="Load_Click">
                    <Image Source="/assets/images/open-file.png" Opacity="0.8"/>
                </Button>

                <WrapPanel HorizontalAlignment="Center"
                           Margin="0,8,0,0">
                    <Button x:Name="btnSave"
                            Content="Save"
                            IsDefault="True"
                            Margin="4,4,0,4"
                            Click="Save_Click">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CloseButton}">
                                <Setter Property="IsEnabled" Value="false" />
                                <Style.Triggers>
                                    <!-- Require the controls to be valid in order to press Save -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding ElementName=txbStimulusBorder, Path=(Validation.HasError)}" Value="False" />
                                            <Condition Binding="{Binding ElementName=txbStimulusGap, Path=(Validation.HasError)}" Value="False" />
                                            <Condition Binding="{Binding ElementName=txbBlankScreenDuration, Path=(Validation.HasError)}" Value="False" />
                                            <Condition Binding="{Binding ElementName=txbStimulusDuration, Path=(Validation.HasError)}" Value="False" />
                                            <Condition Binding="{Binding ElementName=txbResultDisplayDuration, Path=(Validation.HasError)}" Value="False" />
                                            <Condition Binding="{Binding ElementName=txbTrialCount, Path=(Validation.HasError)}" Value="False" />
                                            <Condition Binding="{Binding ElementName=txbSessionDuration, Path=(Validation.HasError)}" Value="False" />
                                            <Condition Binding="{Binding ElementName=txbStimulusUnstretchedSize, Path=(Validation.HasError)}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="IsEnabled" Value="True" />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button x:Name="btnMenu"
                            Width="19"
                            Margin="0,4,4,4"
                            Content="⏷"
                            IsEnabled="{Binding IsEnabled, ElementName=btnSave}"
                            RenderTransformOrigin="0.5,0.5"
                            Click="Menu_Click">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform X="-1"/>
                            </TransformGroup>
                        </Button.RenderTransform>
                        <Button.ContextMenu>
                            <ContextMenu Placement="Left">
                                <MenuItem Style="{StaticResource CompactMenuItemStyle}"
                                          Header="Save as..."
                                          Width="70"
                                          HorizontalContentAlignment="Left"
                                          Click="SaveAs_Click"/>
                            </ContextMenu>
                        </Button.ContextMenu>
                    </Button>
                    <Button Style="{StaticResource CloseButton}" Content="Cancel"
                        IsCancel="True"/>
                </WrapPanel>
            </Grid>
        </StackPanel>
    </Grid>
</Window>
